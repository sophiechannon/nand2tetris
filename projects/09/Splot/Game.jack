class Game {
  field String letters;
  field boolean exit;
  field boolean isWon;
  field boolean isLost;
  field int letterAscii;

  constructor Game new() {
    let letters = String.new(26);
    do createString();
    return this;
  }

  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  method void run() {
    var int counter;
    var int key; 
    var Circle circle;
    var int nextNumber;
    let counter = 0;
    let exit = false;

    do setDarkMode();

    while (~exit) {
      let letterAscii = letters.charAt(counter);
      let circle = Circle.new(Random.generateInRange(letterAscii, 215), Random.generateInRange(letterAscii, 481), letterAscii);

      while (key = 0) {
        let key = Keyboard.keyPressed();
      }

      let nextNumber = counter + 1;
      let counter = nextNumber;
      do circle.erase();
      do setOutcome(key, counter = letters.length());
      
      while (~(key = 0)) {
        let key = Keyboard.keyPressed();
      }
    } 
    do handleOutcome();
    do Screen.clearScreen();
    return;
  }

  method void setOutcome(int key, boolean isOver) {
    if (key = 140) { 
      let exit = true;
      return; 
    }
    if (key = letterAscii) {
      if (isOver) {
        let exit = true;
        let isWon = true;
        return;
      }
    } else {
      let exit = true;
      let isLost = true;
      return;
    }
    return;
  }

  method void setDarkMode() {
    do Screen.setColor(true);
    do Screen.drawRectangle(0, 0, 511, 255);
    return;
  }

  method void handleOutcome() {
    if (isWon) {
      do displayOutcome("YOU ROCK");
      return;
    } if (isLost) {
      do displayOutcome("YOU SUCK");
      return;
    }
    return;
  }

  method void displayOutcome(string outcome) {
    do Screen.setColor(false);
    do Screen.drawLine(0, 72, 511, 72);
    do Screen.drawLine(0, 73, 511, 73);
    do Screen.drawLine(0, 74, 511, 74);
    do Screen.drawLine(0, 75, 511, 75);
    do Screen.drawLine(0, 78, 511, 78);
    do Screen.drawLine(0, 79, 511, 79);
    do Screen.drawLine(0, 80, 511, 80);
    do Screen.drawLine(0, 84, 511, 84);
    do Screen.drawLine(0, 85, 511, 85);
    do Screen.drawLine(0, 90, 511, 90);
    do Screen.drawLine(0, 165, 511, 165);
    do Screen.drawLine(0, 170, 511, 170);
    do Screen.drawLine(0, 171, 511, 171);
    do Screen.drawLine(0, 175, 511, 175);
    do Screen.drawLine(0, 176, 511, 176);
    do Screen.drawLine(0, 177, 511, 177);
    do Screen.drawLine(0, 180, 511, 180);
    do Screen.drawLine(0, 181, 511, 181);
    do Screen.drawLine(0, 182, 511, 182);
    do Screen.drawLine(0, 183, 511, 183);
    do Output.moveCursor(11, 28);
    do Output.printString(outcome);
    do Sys.wait(3000);
    return;
  }

  method void createString() {
      do letters.appendChar(73);  // 'I'
      do letters.appendChar(76);  // 'L'
      do letters.appendChar(87);  // 'W'
      do letters.appendChar(69);  // 'E'
      do letters.appendChar(78);  // 'N'
      do letters.appendChar(80);  // 'P'
      do letters.appendChar(68);  // 'D'
      do letters.appendChar(90);  // 'Z'
      do letters.appendChar(65);  // 'A'
      do letters.appendChar(71);  // 'G'
      do letters.appendChar(66);  // 'B'
      do letters.appendChar(74);  // 'J'
      do letters.appendChar(77);  // 'M'
      do letters.appendChar(78);  // 'N'
      do letters.appendChar(88);  // 'X'
      do letters.appendChar(83);  // 'S'
      do letters.appendChar(72);  // 'H'
      do letters.appendChar(67);  // 'C'
      do letters.appendChar(84);  // 'T'
      do letters.appendChar(75);  // 'K'
      do letters.appendChar(71);  // 'G'
      do letters.appendChar(81);  // 'Q'
      do letters.appendChar(82);  // 'R'
      do letters.appendChar(85);  // 'U'
      do letters.appendChar(86);  // 'V'
      do letters.appendChar(89);  // 'Y'
      return;
  }

}