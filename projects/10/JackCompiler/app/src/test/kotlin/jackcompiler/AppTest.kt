/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package jackcompiler

import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull

class AppTest {
    @Test
    fun hasMoreTokens() {
        var counter = 18;
        val tokenizer = JackTokenizer("./src/test/resources/test1.jack")
        tokenizer.advance()
        assertEquals(tokenizer.hasMoreTokens(), true)
        while (counter > 0) {
            tokenizer.advance()
            counter--
        }
        assertEquals(tokenizer.hasMoreTokens(), false)
    }

    @Test
    fun tokenType() {
        val tokenizer = JackTokenizer("./src/test/resources/test2.jack")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "KEYWORD")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "IDENTIFIER")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "KEYWORD")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "IDENTIFIER")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "KEYWORD")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "IDENTIFIER")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "STRING_CONST")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "KEYWORD")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "IDENTIFIER")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "INT_CONST")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "KEYWORD")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "IDENTIFIER")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "IDENTIFIER")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "STRING_CONST")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "KEYWORD")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")
        tokenizer.advance();
        assertEquals(tokenizer.tokenType, "SYMBOL")




    }
}
