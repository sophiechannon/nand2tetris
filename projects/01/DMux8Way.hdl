// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl

/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            {0, 0, in, 0, 0, 0, 0, 0} if sel == 010
 *                            {0, 0, 0, in, 0, 0, 0, 0} if sel == 011
 *                            {0, 0, 0, 0, in, 0, 0, 0} if sel == 100
 *                            {0, 0, 0, 0, 0, in, 0, 0} if sel == 101
 *                            {0, 0, 0, 0, 0, 0, in, 0} if sel == 110
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    Not(in=sel[0], out=notSel0);
    Not(in=sel[1], out=notSel1);
    Not(in=sel[2], out=notSel2);
    And(a=notSel0, b=notSel1, out=isx00);
    And(a=sel[0], b=notSel1, out=isx01);
    And(a=notSel0, b=sel[1], out=isx10);
    And(a=sel[0], b=sel[1], out=isx11);
    And(a=isx00, b=notSel2, out=is000);
    And(a=isx01, b=notSel2, out=is001);
    And(a=isx10, b=notSel2, out=is010);
    And(a=isx11, b=notSel2, out=is011);
    And(a=isx00, b=sel[2], out=is100);
    And(a=isx01, b=sel[2], out=is101);
    And(a=isx10, b=sel[2], out=is110);
    And(a=isx11, b=sel[2], out=is111);
    And(a=is000, b=in, out=a);
    And(a=is001, b=in, out=b);
    And(a=is010, b=in, out=c);
    And(a=is011, b=in, out=d);
    And(a=is100, b=in, out=e);
    And(a=is101, b=in, out=f);
    And(a=is110, b=in, out=g);
    And(a=is111, b=in, out=h);
}

    // A better answer that I found elsewhere
    // DMux(in=in, sel=sel[2], a=outA, b=outB);
    // DMux4Way(in=outA, sel=sel[0..1], a=a, b=b, c=c, d=d);
    // DMux4Way(in=outB, sel=sel[0..1], a=e, b=f, c=g, d=h);
